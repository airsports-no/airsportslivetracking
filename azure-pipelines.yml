# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

# trigger:
# - master

variables:
  containerName: tracker_daphne
  IMAGE_TAG: $(Build.BuildId)
  ACR_ADDRESS: airsportsacr.azurecr.io/
  ContainerRegistryName: airsportsacr.azurecr.io
  GCR_ADDRESS: europe-west3-docker.pkg.dev/airsports-613ce/airsports/
  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  DOCKER_BUILDKIT: 1
  BUILDKIT_INLINE_CACHE: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    - checkout: self
      submodules: true
      persistCredentials: true
    - task: DockerInstaller@0
      inputs:
        dockerVersion: '24.0.7'
    - task: DockerCompose@0
      displayName: Pull from Azure
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: 'Airsports subscription(025b77b1-c02b-4961-a548-38caf9cbffcd)'
        azureContainerRegistry: '{"loginServer":"airsportsacr.azurecr.io", "id" : "/subscriptions/025b77b1-c02b-4961-a548-38caf9cbffcd/resourceGroups/airsports-github/providers/Microsoft.ContainerRegistry/registries/airsportsacr"}'
        dockerComposeFile: '**/docker-compose.yml'
        dockerComposeFileArgs: |
          REGISTRY_NAME=${{Variables.ACR_ADDRESS}}
          SOURCE_REGISTRY_NAME=${{Variables.ACR_ADDRESS}}
          IMAGE_TAG=latest
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'pull tracker_daphne'
    - script: |
       docker images
    
    - task: Docker@2
      inputs:
        command: 'build'
        Dockerfile: '**/Dockerfile'
        arguments: '--cache-from ${{Variables.ACR_ADDRESS}}/tracker_base:latest'
    # - task: DockerCompose@0
    #   displayName: Build services
    #   inputs:
    #     containerregistrytype: 'Azure Container Registry'
    #     azureSubscription: 'Airsports subscription(025b77b1-c02b-4961-a548-38caf9cbffcd)'
    #     azureContainerRegistry: '{"loginServer":"airsportsacr.azurecr.io", "id" : "/subscriptions/025b77b1-c02b-4961-a548-38caf9cbffcd/resourceGroups/airsports-github/providers/Microsoft.ContainerRegistry/registries/airsportsacr"}'
    #     dockerComposeFile: '**/docker-compose.yml'
    #     dockerComposeFileArgs: |
    #       REGISTRY_NAME=${{Variables.ACR_ADDRESS}}
    #       SOURCE_REGISTRY_NAME=${{Variables.ACR_ADDRESS}}
    #     projectName: '${{Variables.IMAGE_TAG}}'
    #     qualifyImageNames: false
    #     action: 'Run a Docker Compose command'
    #     dockerComposeCommand: 'build'
    - script: |
       docker images
    - task: DockerCompose@0
      displayName: Push to Azure
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: 'Airsports subscription(025b77b1-c02b-4961-a548-38caf9cbffcd)'
        azureContainerRegistry: '{"loginServer":"airsportsacr.azurecr.io", "id" : "/subscriptions/025b77b1-c02b-4961-a548-38caf9cbffcd/resourceGroups/airsports-github/providers/Microsoft.ContainerRegistry/registries/airsportsacr"}'
        dockerComposeFile: '**/docker-compose.yml'
        projectName: '${{Variables.IMAGE_TAG}}'
        dockerComposeFileArgs: |
          REGISTRY_NAME=${{Variables.ACR_ADDRESS}}
          SOURCE_REGISTRY_NAME=${{Variables.ACR_ADDRESS}}
        action: 'Push services'
        includeLatestTag: true
- stage: Test
  condition: succeeded()
  jobs:
  - job: Test
    steps:
    - checkout: self
      submodules: true
      persistCredentials: true
    - task: DockerInstaller@0
      inputs:
        dockerVersion: '24.0.7'
    - task: DockerCompose@0
      displayName: Pull from Azure
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: 'Airsports subscription(025b77b1-c02b-4961-a548-38caf9cbffcd)'
        azureContainerRegistry: '{"loginServer":"airsportsacr.azurecr.io", "id" : "/subscriptions/025b77b1-c02b-4961-a548-38caf9cbffcd/resourceGroups/airsports-github/providers/Microsoft.ContainerRegistry/registries/airsportsacr"}'
        dockerComposeFile: '**/docker-compose.yml'
        dockerComposeFileArgs: |
          REGISTRY_NAME=${{Variables.ACR_ADDRESS}}
          SOURCE_REGISTRY_NAME=${{Variables.ACR_ADDRESS}}
        projectName: '${{Variables.IMAGE_TAG}}'
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'pull'
    - task: DockerCompose@0
      displayName: Run tests
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: 'Airsports subscription(025b77b1-c02b-4961-a548-38caf9cbffcd)'
        azureContainerRegistry: '{"loginServer":"airsportsacr.azurecr.io", "id" : "/subscriptions/025b77b1-c02b-4961-a548-38caf9cbffcd/resourceGroups/airsports-github/providers/Microsoft.ContainerRegistry/registries/airsportsacr"}'
        dockerComposeFile: '**/docker-compose.yml'
        dockerComposeFileArgs: |
          REGISTRY_NAME=${{Variables.ACR_ADDRESS}}
          SOURCE_REGISTRY_NAME=${{Variables.ACR_ADDRESS}}
        projectName: '${{Variables.IMAGE_TAG}}'
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'up'
        arguments: '-d ${{Variables.containerName}}'
    - script: |
        docker exec ${{Variables.containerName}} /bin/bash -c "mkdir -p reports && rm -rf reports/*"
      displayName: Prepare daphne container for test run
#    - script: |
#       docker exec ${{Variables.containerName}} /bin/bash -c "flake8 ."
#      displayName: Run lint
    - script: |
       docker exec ${{Variables.containerName}} /bin/bash -c "/wait-for-it.sh \"mysql:3306\" -t 30"
       docker exec ${{Variables.containerName}} /bin/bash -c "pytest --junitxml reports/django_test_results.xml --cov=. --cov-report=xml:reports/django_coverage.xml || test -f reports/django_test_results.xml"
      displayName: Run main tests
    - script: 'docker cp ${{Variables.containerName}}:/src/reports/. reports'
      displayName: Get reports from container
  
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: 'reports/django_coverage.xml'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'reports/*.xml'
        mergeTestResults: true
        failTaskOnFailedTests: true
    - task: DockerCompose@0
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: 'Airsports subscription(025b77b1-c02b-4961-a548-38caf9cbffcd)'
        azureContainerRegistry: '{"loginServer":"airsportsacr.azurecr.io", "id" : "/subscriptions/025b77b1-c02b-4961-a548-38caf9cbffcd/resourceGroups/airsports-github/providers/Microsoft.ContainerRegistry/registries/airsportsacr"}'
        dockerComposeFile: '**/docker-compose.yml'
        dockerComposeFileArgs: |
          REGISTRY_NAME=${{Variables.ACR_ADDRESS}}
          SOURCE_REGISTRY_NAME=${{Variables.ACR_ADDRESS}}
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'down'
    - script: |  
        rm -rf reports/*
      displayName: 'Clear reports'
- stage: Deploy
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/prod'))
  jobs:
  - deployment: live_tracking_deployment
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/process/deployment-jobs?view=azure-devops
    displayName: 'Deploy'
    environment: 'gke-release'
    strategy:
      runOnce:
        preDeploy:
          pool: server
          steps:
          - task: ManualValidation@0
            displayName: 'Wait for validation'
            timeoutInMinutes: 1440 # task times out in 1 day
            inputs:
              notifyUsers: 'kolaf@airsportslt.onmicrosoft.com'
              instructions: 'Approve deployment'
        deploy:
          steps:
          - checkout: self
            submodules: true
            persistCredentials: true
          - task: DockerInstaller@0
            inputs:
              dockerVersion: '24.0.7'
          - task: HelmInstaller@0
            inputs:
              helmVersion: '2.14.1'
              installKubectl: true
          - task: DownloadSecureFile@1
            name: privateValues
            displayName: 'Download private values'
            inputs:
              secureFile: 'private_values_gcloud.yaml'
          - task: DockerCompose@0
            displayName: Pull from Azure
            inputs:
              containerregistrytype: 'Azure Container Registry'
              azureSubscription: 'Airsports subscription(025b77b1-c02b-4961-a548-38caf9cbffcd)'
              azureContainerRegistry: '{"loginServer":"airsportsacr.azurecr.io", "id" : "/subscriptions/025b77b1-c02b-4961-a548-38caf9cbffcd/resourceGroups/airsports-github/providers/Microsoft.ContainerRegistry/registries/airsportsacr"}'
              dockerComposeFile: '**/docker-compose.yml'
              dockerComposeFileArgs: |
                REGISTRY_NAME=${{Variables.ACR_ADDRESS}}
                SOURCE_REGISTRY_NAME=${{Variables.ACR_ADDRESS}}
                IMAGE_TAG=latest
              action: 'Run a Docker Compose command'
              dockerComposeCommand: 'pull tracker_daphne'
          - task: Docker@2
            inputs:
              containerRegistry: 'GKE Docker registry'
              command: 'login'
          - script: |
              docker image tag ${{Variables.ACR_ADDRESS}}/tracker_base:${{Variables.IMAGE_TAG}} ${{Variables.GCR_ADDRESS}}/tracker_base:${{Variables.IMAGE_TAG}}
            displayName: Tag images with google address
          - task: DockerCompose@0
            displayName: Push to Google
            inputs:
              containerregistrytype: 'Container Registry'
              dockerRegistryEndpoint: 'GKE Docker registry'
              dockerComposeFile: '**/docker-compose.yml'
              projectName: '${{Variables.IMAGE_TAG}}'
              dockerComposeFileArgs: |
                REGISTRY_NAME=${{Variables.GCR_ADDRESS}}
                SOURCE_REGISTRY_NAME=${{Variables.GCR_ADDRESS}}
              action: 'Push services'
              additionalImageTags: '${{Variables.tag}}'
              includeLatestTag: true
          - task: HelmDeploy@0
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'GKE Kubernetes connection'
              namespace: 'default'
              command: 'upgrade'
              chartType: 'Name'
              chartName: '$(Agent.BuildDirectory)/s/helm/'
              releaseName: 'airsportsrelease'
              overrideValues: 'image.tag=${{ variables.IMAGE_TAG }}'
              valueFile: '$(privateValues.secureFilePath)'
              arguments: '--timeout 15m0s'