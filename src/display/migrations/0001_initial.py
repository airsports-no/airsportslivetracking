# Generated by Django 3.1.4 on 2020-12-07 08:28

import display.my_pickled_object_field
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Aeroplane',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('contest_type', models.IntegerField(choices=[(0, 'Precision'), (1, 'ANR')], default=0)),
                ('start_time', models.DateTimeField()),
                ('finish_time', models.DateTimeField()),
                ('wind_speed', models.FloatField(default=0)),
                ('wind_direction', models.FloatField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Contestant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('takeoff_time', models.DateTimeField()),
                ('minutes_to_starting_point', models.FloatField(default=5)),
                ('finished_by_time', models.DateTimeField(null=True)),
                ('air_speed', models.FloatField(default=70)),
                ('contestant_number', models.IntegerField()),
                ('traccar_device_name', models.CharField(max_length=100)),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='display.contest')),
            ],
        ),
        migrations.CreateModel(
            name='GateScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extended_gate_width', models.FloatField(default=0, help_text='For SP it is 2 (1 nm each side), for tp with procedure turn it is 6')),
                ('bad_crossing_extended_gate_penalty', models.FloatField(default=200)),
                ('graceperiod_before', models.FloatField(default=3)),
                ('graceperiod_after', models.FloatField(default=3)),
                ('maximum_penalty', models.FloatField(default=100)),
                ('penalty_per_second', models.FloatField(default=2)),
                ('missed_penalty', models.FloatField(default=100)),
                ('missed_procedure_turn_penalty', models.FloatField(default=200)),
            ],
        ),
        migrations.CreateModel(
            name='TraccarCredentials',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('server_name', models.CharField(max_length=100)),
                ('protocol', models.CharField(default='http', max_length=10)),
                ('address', models.CharField(default='traccar:8082', max_length=100)),
                ('token', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Traccar credentials',
            },
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('waypoints', display.my_pickled_object_field.MyPickledObjectField(default=list, editable=False)),
                ('starting_line', display.my_pickled_object_field.MyPickledObjectField(default=list, editable=False)),
                ('takeoff_gate', display.my_pickled_object_field.MyPickledObjectField(default=None, editable=False, null=True)),
                ('landing_gate', display.my_pickled_object_field.MyPickledObjectField(default=None, editable=False, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pilot', models.CharField(max_length=200)),
                ('navigator', models.CharField(blank=True, max_length=200)),
                ('aeroplane', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='display.aeroplane')),
            ],
        ),
        migrations.CreateModel(
            name='Scorecard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='default', max_length=100, unique=True)),
                ('backtracking_penalty', models.FloatField(default=200)),
                ('backtracking_bearing_difference', models.FloatField(default=200)),
                ('backtracking_grace_time_seconds', models.FloatField(default=5)),
                ('below_minimum_altitude_penalty', models.FloatField(default=500)),
                ('finish_point_gate_score', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='finish', to='display.gatescore')),
                ('landing_gate_score', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='landing', to='display.gatescore')),
                ('secret_gate_score', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='secret', to='display.gatescore')),
                ('starting_point_gate_score', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='starting', to='display.gatescore')),
                ('takeoff_gate_score', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='takeoff', to='display.gatescore')),
                ('turning_point_gate_score', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='turning_point', to='display.gatescore')),
            ],
        ),
        migrations.CreateModel(
            name='ContestantTrack',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score_log', display.my_pickled_object_field.MyPickledObjectField(default=list, editable=False)),
                ('score_per_gate', display.my_pickled_object_field.MyPickledObjectField(default=dict, editable=False)),
                ('score', models.FloatField(default=0)),
                ('current_state', models.CharField(default='Waiting...', max_length=200)),
                ('current_leg', models.CharField(default='', max_length=100)),
                ('last_gate', models.CharField(default='', max_length=100)),
                ('last_gate_time_offset', models.FloatField(default=0)),
                ('past_starting_gate', models.BooleanField(default=False)),
                ('past_finish_gate', models.BooleanField(default=False)),
                ('calculator_finished', models.BooleanField(default=False)),
                ('contestant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='display.contestant')),
            ],
        ),
        migrations.AddField(
            model_name='contestant',
            name='scorecard',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='display.scorecard'),
        ),
        migrations.AddField(
            model_name='contestant',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='display.team'),
        ),
        migrations.AddField(
            model_name='contest',
            name='track',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='display.track'),
        ),
        migrations.AlterUniqueTogether(
            name='contestant',
            unique_together={('contest', 'contestant_number')},
        ),
    ]
