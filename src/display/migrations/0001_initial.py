# Generated by Django 3.1.4 on 2020-12-18 08:46

import display.my_pickled_object_field
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Aeroplane',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration', models.CharField(max_length=20)),
                ('colour', models.CharField(blank=True, max_length=40)),
                ('type', models.CharField(blank=True, max_length=50)),
                ('picture', models.ImageField(blank=True, null=True, upload_to='images/aircraft/')),
            ],
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='images/clubs/')),
            ],
            options={
                'unique_together': {('name', 'country')},
            },
        ),
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summary_score_sorting_direction', models.CharField(choices=[('desc', 'Descending'), ('asc', 'Ascending')], default='asc', help_text='Whether the lowest (ascending) or highest (ascending) score is the best result', max_length=50)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('is_public', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Contestant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('takeoff_time', models.DateTimeField(help_text='The time the take of gate (if it exists) should be crossed. Otherwise it is the time power should be applied')),
                ('minutes_to_starting_point', models.FloatField(default=5, help_text='The number of minutes from the take-off time until the starting point')),
                ('finished_by_time', models.DateTimeField(help_text='The time it is expected that the navigation task has finished and landed (used among other things for knowing when the tracker is busy). Is also used for the gate time for the landing gate')),
                ('air_speed', models.FloatField(default=70, help_text='The planned airspeed for the contestant')),
                ('contestant_number', models.PositiveIntegerField(help_text='A unique number for the contestant in this navigation task')),
                ('tracking_service', models.IntegerField(choices=[(0, 'Traccar')], default=0, help_text="Supported tracking services: ((0, 'Traccar'),)")),
                ('traccar_device_name', models.CharField(help_text='ID of physical tracking device that will be brought into the plane', max_length=100)),
                ('tracker_start_time', models.DateTimeField(help_text='When the tracker is handed to the contestant, can have no changes to the route (e.g. wind and timing) after this.')),
                ('predefined_gate_times', display.my_pickled_object_field.MyPickledObjectField(blank=True, default=None, editable=False, help_text='Dictionary of gates and their starting times (with time zone)', null=True)),
                ('wind_speed', models.FloatField(default=0, help_text='The navigation test wind speed. This is used to calculate gate times if these are not predefined.')),
                ('wind_direction', models.FloatField(default=0, help_text='The navigation test wind direction. This is used to calculate gate times if these are not predefined.')),
            ],
        ),
        migrations.CreateModel(
            name='Crew',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='GateScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extended_gate_width', models.FloatField(default=0, help_text='For SP it is 2 (1 nm each side), for tp with procedure turn it is 6')),
                ('bad_crossing_extended_gate_penalty', models.FloatField(default=200)),
                ('graceperiod_before', models.FloatField(default=3)),
                ('graceperiod_after', models.FloatField(default=3)),
                ('maximum_penalty', models.FloatField(default=100)),
                ('penalty_per_second', models.FloatField(default=2)),
                ('missed_penalty', models.FloatField(default=100)),
                ('missed_procedure_turn_penalty', models.FloatField(default=200)),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=200)),
                ('last_name', models.CharField(max_length=200)),
                ('picture', models.ImageField(blank=True, null=True, upload_to='images/people/')),
                ('biography', models.TextField(blank=True)),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='Route',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('waypoints', display.my_pickled_object_field.MyPickledObjectField(default=list, editable=False)),
                ('starting_line', display.my_pickled_object_field.MyPickledObjectField(default=list, editable=False)),
                ('takeoff_gate', display.my_pickled_object_field.MyPickledObjectField(default=None, editable=False, null=True)),
                ('landing_gate', display.my_pickled_object_field.MyPickledObjectField(default=None, editable=False, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summary_score_sorting_direction', models.CharField(choices=[('desc', 'Descending'), ('asc', 'Ascending')], default='asc', help_text='Whether the lowest (ascending) or highest (ascending) score is the best result', max_length=50)),
                ('name', models.CharField(max_length=100)),
                ('heading', models.CharField(max_length=100)),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='display.contest')),
            ],
        ),
        migrations.CreateModel(
            name='TaskTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('heading', models.CharField(max_length=100)),
                ('sorting', models.CharField(choices=[('desc', 'Descending'), ('asc', 'Ascending')], default='asc', help_text='Whether the lowest (ascending) or highest (ascending) score is the best result', max_length=50)),
                ('index', models.IntegerField(help_text='The index of the task when displayed as columns in a table. Indexes are sorted in ascending order to determine column order')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='display.task')),
            ],
            options={
                'unique_together': {('name', 'task')},
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='images/teams/')),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2)),
                ('aeroplane', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='display.aeroplane')),
                ('club', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='display.club')),
                ('crew', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='display.crew')),
            ],
        ),
        migrations.CreateModel(
            name='TraccarCredentials',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('server_name', models.CharField(max_length=100)),
                ('protocol', models.CharField(default='http', max_length=10)),
                ('address', models.CharField(default='traccar:8082', max_length=100)),
                ('token', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Traccar credentials',
            },
        ),
        migrations.CreateModel(
            name='TaskSummary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.FloatField()),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='display.task')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='display.team')),
            ],
        ),
        migrations.AddField(
            model_name='task',
            name='default_sorting',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_sort', to='display.tasktest'),
        ),
        migrations.CreateModel(
            name='Scorecard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='default', max_length=100, unique=True)),
                ('backtracking_penalty', models.FloatField(default=200)),
                ('backtracking_bearing_difference', models.FloatField(default=90)),
                ('backtracking_grace_time_seconds', models.FloatField(default=5)),
                ('below_minimum_altitude_penalty', models.FloatField(default=500)),
                ('finish_point_gate_score', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='finish', to='display.gatescore')),
                ('landing_gate_score', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='landing', to='display.gatescore')),
                ('secret_gate_score', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='secret', to='display.gatescore')),
                ('starting_point_gate_score', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='starting', to='display.gatescore')),
                ('takeoff_gate_score', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='takeoff', to='display.gatescore')),
                ('turning_point_gate_score', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='turning_point', to='display.gatescore')),
            ],
        ),
        migrations.CreateModel(
            name='NavigationTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('calculator_type', models.IntegerField(choices=[(0, 'Precision')], default=0, help_text="Supported navigation test calculator types. Different calculators might require different scorecard types, but currently we only support a single calculator.  Value map: ((0, 'Precision'),)")),
                ('start_time', models.DateTimeField(help_text='The start time of the navigation test. Not really important, but nice to have')),
                ('finish_time', models.DateTimeField(help_text='The finish time of the navigation test. Not really important, but nice to have')),
                ('is_public', models.BooleanField(default=False, help_text='The navigation test is only viewable by unauthenticated users or users without object permissions if this is True')),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='display.contest')),
                ('route', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='display.route')),
            ],
            options={
                'ordering': ('start_time', 'finish_time'),
            },
        ),
        migrations.AddField(
            model_name='crew',
            name='member1',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='crewmember_one', to='display.person'),
        ),
        migrations.AddField(
            model_name='crew',
            name='member2',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='crewmember_two', to='display.person'),
        ),
        migrations.CreateModel(
            name='ContestSummary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.FloatField()),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='display.contest')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='display.team')),
            ],
        ),
        migrations.CreateModel(
            name='ContestantTrack',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score_log', display.my_pickled_object_field.MyPickledObjectField(default=list, editable=False)),
                ('score_per_gate', display.my_pickled_object_field.MyPickledObjectField(default=dict, editable=False)),
                ('score', models.FloatField(default=0)),
                ('current_state', models.CharField(default='Waiting...', max_length=200)),
                ('current_leg', models.CharField(default='', max_length=100)),
                ('last_gate', models.CharField(default='', max_length=100)),
                ('last_gate_time_offset', models.FloatField(default=0)),
                ('past_starting_gate', models.BooleanField(default=False)),
                ('past_finish_gate', models.BooleanField(default=False)),
                ('calculator_finished', models.BooleanField(default=False)),
                ('contestant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='display.contestant')),
            ],
        ),
        migrations.AddField(
            model_name='contestant',
            name='navigation_task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='display.navigationtask'),
        ),
        migrations.AddField(
            model_name='contestant',
            name='scorecard',
            field=models.ForeignKey(help_text='Reference to an existing scorecard name. Currently existing scorecards: <function Contestant.<lambda> at 0x7f45b79ebe18>', on_delete=django.db.models.deletion.PROTECT, to='display.scorecard'),
        ),
        migrations.AddField(
            model_name='contestant',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='display.team'),
        ),
        migrations.CreateModel(
            name='TeamTestScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.FloatField()),
                ('task_test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='display.tasktest')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='display.team')),
            ],
            options={
                'unique_together': {('team', 'task_test')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='task',
            unique_together={('name', 'contest')},
        ),
        migrations.AlterUniqueTogether(
            name='contestant',
            unique_together={('navigation_task', 'contestant_number')},
        ),
    ]
